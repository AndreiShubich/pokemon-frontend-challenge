{"version":3,"sources":["types/pokemonTypes.ts","utils/Pokedex.ts","hooks/usePokemon.ts","hooks/usePokemonSpecies.ts","constants/colors.ts","utils/getPokemonTypeNames.ts","utils/getPokemonBackground.ts","components/StyledLink/StyledLink.tsx","pages/Pokemon/components/PokemonSection/PokemonSection.tsx","components/Badge/Badge.tsx","components/PokemonTypeBadge/PokemonTypeBadge.tsx","constants/stat.ts","pages/Pokemon/components/PokemonBasicInfo/PokemonBasicInfo.tsx","utils/getPokemonGenderRatio.ts","utils/getPokemonHeight.ts","utils/getPokemonCatchRate.ts","utils/getPokemonWeight.ts","utils/getPokemonHatchSteps.ts","utils/getPokemonAbilities.ts","utils/getPokemonEggGroups.ts","pages/Pokemon/components/PokemonProfile/PokemonProfile.tsx","hooks/useEvolutionChain.ts","containers/PokemonContainer.tsx","components/PokemonCard/PokemonCard.tsx","pages/Pokemon/components/PokemonEvolution/PokemonEvolution.tsx","hooks/useMove.ts","containers/MoveContainer.tsx","pages/Pokemon/components/PokemonMoves/PokemonMoves.tsx","pages/Pokemon/Pokemon.tsx","components/Pagination/utils.ts","components/Pagination/Pagination.tsx","components/Filter/Filter.tsx","hooks/usePokemonList.ts","pages/AllPokemons/constants.ts","pages/AllPokemons/AllPokemons.tsx","constants/limits.ts","serviceWorker.ts","index.tsx","constants/url.ts"],"names":["PokemonTypeName","PokemonStatName","P","Pokedex","usePokemon","nameOrId","_useState","useState","_useState2","Object","slicedToArray","isLoading","setIsLoading","_useState3","_useState4","pokemon","setPokemon","useEffect","getPokemonByName","then","response","catch","console","error","finally","usePokemonSpecies","pokemonSpecies","setPokemonSpecies","getPokemonSpeciesByName","TYPE_COLOR_MAP","_TYPE_COLOR_MAP","defineProperty","normal","fighting","flying","poison","ground","rock","bug","ghost","steel","fire","water","grass","electric","psychic","ice","dragon","dark","fairy","getPokemonTypeNames","types","map","_ref","type","name","getPokemonBackground","typeNames","_typeNames","type1","type2","concat","React","memo","className","_ref$unstyled","unstyled","linkProps","objectWithoutProperties","linkClassName","useMemo","classNames","StyledLink_unstyled","react_default","a","createElement","react_router_dom","assign","PokemonSection","title","isMain","children","sectionClassName","headerClassName","PokemonSection-Header_main","color","backgroundColor","volume","badgeClassName","Badge_volume","style","typeName","filling","colorProps","typeColor","components_Badge_Badge","STAT_MAP","_STAT_MAP","hp","attack","defense","speed","pokemonTypeNames","id","stats","imgSrc","sprites","front_default","src","alt","components_PokemonTypeBadge_PokemonTypeBadge","key","stat","max","value","base_stat","getPokemonGenderRatio","gender_rate","femaleChance","maleChance","getPokemonHeight","height","getPokemonCatchRate","capture_rate","toFixed","getPokemonWeight","getPokemonHatchSteps","hatch_counter","getPokemonAbilities","abilities","ability","join","getPokemonEggGroups","egg_groups","group","renderData","useCallback","property","capitalizeValue","valueClassName","PokemonProfile-Value_capitalize","useEvolutionChain","evolutionChainUrl","evolutionChain","setEvolutionChain","resource","_usePokemon","Fragment","pokemonColor","cardClassName","background","_useEvolutionChain","evolution_chain","url","getFlatChain","chain","evolves_to","length","species","toConsumableArray","index","arr","containers_PokemonContainer","isPokemonLoading","components_StyledLink_StyledLink","to","components_PokemonCard_PokemonCard","useMove","move","setMove","getMoveByName","_useMove","PokemonMove","showDetails","setShowDetails","preferredName","names","find","item","language","moveEffect","effect_chance","effect_entries","effect","replace","toString","moveIndicators","power","accuracy","pp","onClick","indicator","_ref2","movesClassName","moves","moveItem","containers_MoveContainer","isMoveLoading","PokemonMoves_PokemonMove","PokemonWrapper","match","params","_usePokemonSpecies","isPokemonSpeciesLoading","Pokemon_PokemonWrapper","pokemonBackground","components_PokemonSection_PokemonSection","components_PokemonBasicInfo_PokemonBasicInfo","components_PokemonProfile_PokemonProfile","components_PokemonEvolution_PokemonEvolution","components_PokemonMoves_PokemonMoves","getNextPageNumber","pageNumber","numberOfPages","getPrevPageNumber","count","limit","offset","setOffset","Math","ceil","getNumberOfPages","currentPageNumber","getCurrentPageNumber","nextPageNumber","afterNextPageNumber","prevPageNumber","beforePrevPageNumber","visiblePages","result","push","handlePageClick","paginationClassName","Pagination-Page_possible","Pagination-Page_disabled","Pagination-Page_active","Filter","values","activeValue","onSetValue","Filter-Item_active","usePokemonList","pokemonsList","setPokemonsList","getPokemonsList","getTypeByName","results","slice","next","previous","DEFAULT_FILTER_ALL","FILTERS","parseInt","sessionStorage","getItem","activeFilter","setActiveFilter","_usePokemonList","undefined","handleSetOffset","newOffset","setItem","handleSetFilter","newFilter","renderPokemon","components_Filter_Filter","components_Pagination_Pagination","Boolean","window","location","hostname","ReactDOM","render","basename","process","react_router","exact","path","component","AllPokemons","Pokemon","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bde28383.chunk.js","sourcesContent":["/* eslint-disable import/prefer-default-export */\n\nimport { INamedAPIResource } from './commonTypes';\n\ninterface IPokemonSprites {\n  front_default: string;\n  front_shiny: string;\n  front_female: string;\n  front_shiny_female: string;\n  back_default: string;\n  back_shiny: string;\n  back_female: string;\n  back_shiny_female: string;\n}\n\nexport enum PokemonTypeName {\n  normal = 'normal',\n  fighting = 'fighting',\n  flying = 'flying',\n  poison = 'poison',\n  ground = 'ground',\n  rock = 'rock',\n  bug = 'bug',\n  ghost = 'ghost',\n  steel = 'steel',\n  fire = 'fire',\n  water = 'water',\n  grass = 'grass',\n  electric = 'electric',\n  psychic = 'psychic',\n  ice = 'ice',\n  dragon = 'dragon',\n  dark = 'dark',\n  fairy = 'fairy',\n}\n\nexport interface IPokemonType {\n  slot: number;\n  type: INamedAPIResource<PokemonTypeName>;\n}\n\ninterface IPokemonAbility {\n  ability: INamedAPIResource;\n  is_hidden: boolean;\n  slot: number;\n}\n\ninterface IPokemonMoveVersion {\n  move_learn_method: INamedAPIResource;\n  version_group: INamedAPIResource;\n  level_learned_at: number;\n}\n\ninterface IPokemonMove {\n  move: INamedAPIResource;\n  version_group_details: IPokemonMoveVersion[];\n}\n\nexport enum PokemonStatName {\n  hp = 'hp',\n  attack = 'attack',\n  defense = 'defense',\n  speed = 'speed',\n  'special-attack' = 'special-attack',\n  'special-defense' = 'special-defense',\n}\n\ninterface IPokemonStat {\n  stat: INamedAPIResource<PokemonStatName>;\n  effort: number;\n  base_stat: number;\n}\n\ninterface IVersionGameIndex {\n  game_index: number;\n  version: INamedAPIResource;\n}\n\ninterface IPokemonHeldItemVersion {\n  version: INamedAPIResource;\n  rarity: number;\n}\n\ninterface IPokemonHeldItem {\n  item: INamedAPIResource;\n  version_details: IPokemonHeldItemVersion[];\n}\n\nexport interface IPokemon {\n  id: number;\n  name: string;\n  base_experience: number;\n  height:number;\n  is_default: boolean;\n  order: number;\n  weight: number;\n  abilities: IPokemonAbility[];\n  forms: INamedAPIResource[];\n  game_indices: IVersionGameIndex[];\n  held_items: IPokemonHeldItem[];\n  location_area_encounters: string;\n  moves: IPokemonMove[];\n  sprites: IPokemonSprites;\n  species: INamedAPIResource;\n  stats: IPokemonStat[];\n  types: IPokemonType[];\n}\n","import { Pokedex } from 'pokeapi-js-wrapper';\n\nconst P = new Pokedex();\n\nexport default P;\n","import { useState, useEffect } from 'react';\nimport { IPokemon } from 'types/pokemonTypes';\nimport Pokedex from 'utils/Pokedex';\n\n// pokeapi-js-wrapper, Any function with the designation \"ByName\" can also be passed an integer ID.\nconst usePokemon = (nameOrId: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [pokemon, setPokemon] = useState<IPokemon>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    Pokedex.getPokemonByName(nameOrId)\n      .then((response: IPokemon) => {\n        setPokemon(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [nameOrId]);\n\n  return ({ isLoading, pokemon });\n};\n\nexport default usePokemon;\n","import { useState, useEffect } from 'react';\nimport { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\nimport Pokedex from 'utils/Pokedex';\n\n// pokeapi-js-wrapper, Any function with the designation \"ByName\" can also be passed an integer ID.\nconst usePokemonSpecies = (nameOrId: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [pokemonSpecies, setPokemonSpecies] = useState<IPokemonSpecies>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    Pokedex.getPokemonSpeciesByName(nameOrId)\n      .then((response: IPokemonSpecies) => {\n        setPokemonSpecies(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [nameOrId]);\n\n  return ({ isLoading, pokemonSpecies });\n};\n\nexport default usePokemonSpecies;\n","import { PokemonTypeName } from 'types/pokemonTypes';\n\n/* eslint-disable import/prefer-default-export */\nexport const TYPE_COLOR_MAP = {\n  [PokemonTypeName.normal]: '#9C9C63',\n  [PokemonTypeName.fighting]: '#AE2A24',\n  [PokemonTypeName.flying]: '#8E6FEB',\n  [PokemonTypeName.poison]: '#923A92',\n  [PokemonTypeName.ground]: '#DBB54D',\n  [PokemonTypeName.rock]: '#A48F32',\n  [PokemonTypeName.bug]: '#97A51D',\n  [PokemonTypeName.ghost]: '#644E88',\n  [PokemonTypeName.steel]: '#A0A0C0',\n  [PokemonTypeName.fire]: '#ED6D12',\n  [PokemonTypeName.water]: '#4578ED',\n  [PokemonTypeName.grass]: '#69C23D',\n  [PokemonTypeName.electric]: '#F6C913',\n  [PokemonTypeName.psychic]: '#F73670',\n  [PokemonTypeName.ice]: '#7ECECE',\n  [PokemonTypeName.dragon]: '#5E1DF7',\n  [PokemonTypeName.dark]: '#644E40',\n  [PokemonTypeName.fairy]: '#E87890',\n  // unknown: '',\n  // shadow: '',\n};\n","import { IPokemon } from 'types/pokemonTypes';\n\nconst getPokemonTypeNames = (pokemon: IPokemon) => pokemon.types.map(\n  ({ type: { name: typeName } }) => typeName,\n);\n\nexport default getPokemonTypeNames;\n","import { IPokemon } from 'types/pokemonTypes';\nimport { TYPE_COLOR_MAP } from 'constants/colors';\nimport getPokemonTypeNames from './getPokemonTypeNames';\n\nconst getPokemonBackground = (pokemon: IPokemon) => {\n  const typeNames = getPokemonTypeNames(pokemon);\n\n  const [type1, type2] = typeNames;\n\n  if (!type1) {\n    return undefined;\n  }\n\n  if (!type2) {\n    return TYPE_COLOR_MAP[type1];\n  }\n\n  return `linear-gradient(90deg, ${TYPE_COLOR_MAP[type1]} 50%, ${TYPE_COLOR_MAP[type2]} 50%)`;\n};\n\nexport default getPokemonBackground;\n","import React, { HTMLAttributes, useMemo } from 'react';\nimport { Link, LinkProps } from 'react-router-dom';\nimport classNames from 'classnames';\n\nimport './StyledLink.scss';\n\nconst StyledLink: React.FC<{\n  unstyled?: boolean;\n} & LinkProps & HTMLAttributes<HTMLAnchorElement>> = ({\n  className,\n  unstyled = true,\n  ...linkProps\n}) => {\n  const linkClassName = useMemo(() => classNames('StyledLink', className, {\n    StyledLink_unstyled: unstyled,\n  }), [className, unstyled]);\n\n  return <Link className={linkClassName} {...linkProps} />;\n};\n\nexport default React.memo(StyledLink);\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport './PokemonSection.scss';\n\nconst PokemonSection: React.FC<{\n  title: string;\n  isMain?: boolean;\n  className?: string;\n  children: React.ReactNode;\n}> = ({\n  title, isMain, className, children,\n}) => {\n  const sectionClassName = classNames('PokemonSection', className);\n\n  const headerClassName = classNames('PokemonSection-Header', {\n    'PokemonSection-Header_main': isMain,\n  });\n\n  return (\n    <section className={sectionClassName}>\n      <header className={headerClassName}>\n        {title}\n      </header>\n      {children}\n    </section>\n  );\n};\n\nexport default PokemonSection;\n","import React, { HTMLAttributes, useMemo } from 'react';\nimport classNames from 'classnames';\n\nimport './Badge.scss';\n\nconst Badge: React.FC<{\n  children: string;\n  color?: string;\n  backgroundColor?: string;\n  volume?: boolean;\n} & HTMLAttributes<HTMLSpanElement>> = ({\n  children, color, backgroundColor, volume, className,\n}) => {\n  const badgeClassName = useMemo(() => classNames('Badge', className, {\n    Badge_volume: volume,\n  }), [className, volume]);\n\n  return (\n    <span\n      style={{ color, backgroundColor }}\n      className={badgeClassName}\n    >\n      {children}\n\n    </span>\n  );\n};\n\nexport default React.memo(Badge);\n","import React, { HTMLAttributes, useMemo } from 'react';\nimport classNames from 'classnames';\nimport { PokemonTypeName } from 'types/pokemonTypes';\nimport { TYPE_COLOR_MAP } from 'constants/colors';\nimport Badge from 'components/Badge';\n\nconst PokemonTypeBadge: React.FC<{\n  children: string;\n  typeName: PokemonTypeName;\n  filling?: boolean;\n  volume?: boolean;\n} & HTMLAttributes<HTMLSpanElement>> = ({\n  children, typeName, filling, volume, className,\n}) => {\n  const badgeClassName = useMemo(() => classNames('PokemonTypeBadge', className, {\n  }), [className]);\n\n  const colorProps = useMemo(() => {\n    const typeColor = TYPE_COLOR_MAP[typeName];\n\n    if (filling) {\n      return { backgroundColor: typeColor, color: 'white' };\n    }\n\n    return { color: typeColor };\n  }, [filling, typeName]);\n\n  return (\n    <Badge\n      className={badgeClassName}\n      volume={volume}\n      {...colorProps}\n    >\n      {children}\n    </Badge>\n  );\n};\n\nexport default React.memo(PokemonTypeBadge);\n","import { PokemonStatName } from 'types/pokemonTypes';\n\n/* eslint-disable import/prefer-default-export */\nexport const STAT_MAP = {\n  [PokemonStatName.hp]: 'HP',\n  [PokemonStatName.attack]: 'Attack',\n  [PokemonStatName.defense]: 'Defense',\n  [PokemonStatName.speed]: 'Speed',\n  [PokemonStatName['special-attack']]: 'Sp Atk',\n  [PokemonStatName['special-defense']]: 'Sp Def',\n};\n","import React from 'react';\nimport { IPokemon } from 'types/pokemonTypes';\nimport getPokemonTypeNames from 'utils/getPokemonTypeNames';\nimport PokemonTypeBadge from 'components/PokemonTypeBadge';\nimport { STAT_MAP } from 'constants/stat';\n\nimport './PokemonBasicInfo.scss';\n\nconst PokemonBasicInfo: React.FC<{\n  pokemon: IPokemon;\n}> = ({ pokemon }) => {\n  const pokemonTypeNames = getPokemonTypeNames(pokemon);\n\n  const {\n    name, id, stats, sprites: { front_default: imgSrc },\n  } = pokemon;\n\n\n  return (\n    <div className=\"PokemonBasicInfo\">\n      {imgSrc\n        ? <img className=\"PokemonBasicInfo-Image\" src={imgSrc} alt={name} />\n        : <div className=\"PokemonBasicInfo-Image PokemonBasicInfo-Image_none\">?</div>\n      }\n      <div className=\"PokemonBasicInfo-Data\">\n        <div className=\"PokemonBasicInfo-TypesAndId\">\n          <div className=\"PokemonBasicInfo-Types\">\n            {pokemonTypeNames.map(\n              typeName => (\n                <PokemonTypeBadge\n                  key={typeName}\n                  typeName={typeName}\n                  className=\"PokemonBasicInfo-Badge\"\n                  filling\n                  volume\n                >\n                  {typeName}\n                </PokemonTypeBadge>\n              ),\n            )}\n          </div>\n          <div className=\"PokemonBasicInfo-Id\">{id}</div>\n        </div>\n        <div className=\"PokemonBasicInfo-Stats\">\n          {\n            stats.map(stat => (\n              <div key={stat.stat.name} className=\"PokemonBasicInfo-Stat\">\n                <span className=\"PokemonBasicInfo-StatName\">\n                  {STAT_MAP[stat.stat.name]}\n                </span>\n                <progress\n                  className=\"PokemonBasicInfo-StatProgress\"\n                  max={100}\n                  value={stat.base_stat}\n                  title={`${stat.base_stat}`}\n                />\n              </div>\n            ))\n          }\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(PokemonBasicInfo);\n","import { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\n\nconst getPokemonGenderRatio = ({ gender_rate }: IPokemonSpecies) => {\n  // gender_rate - The chance of this Pokémon being female, in eighths; or -1 for genderless\n  // https://github.com/PokeAPI/pokeapi/blob/master/pokemon_v2/README.md#pokemonspecies\n  let femaleChance = 0;\n  let maleChance = 0;\n\n  if (gender_rate !== -1) {\n    femaleChance = gender_rate * 100 / 8;\n    maleChance = 100 - femaleChance;\n  }\n\n  return `${maleChance}% \\u2642 ${femaleChance}% \\u2640`;\n};\n\nexport default getPokemonGenderRatio;\n","import { IPokemon } from 'types/pokemonTypes';\n\nconst getPokemonHeight = ({ height }: IPokemon) => `${height / 10} m`;\n\nexport default getPokemonHeight;\n","import { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\n\nconst getPokemonCatchRate = (\n  { capture_rate }: IPokemonSpecies,\n) => `${(capture_rate * 100 / 255).toFixed(2)}%`;\n\nexport default getPokemonCatchRate;\n","import { IPokemon } from 'types/pokemonTypes';\n\nconst getPokemonWeight = ({ height }: IPokemon) => `${height / 10} kg`;\n\nexport default getPokemonWeight;\n","import { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\n\n// Initial hatch counter: one must walk 255 × (hatch_counter + 1) steps\n// before this Pokémon's egg hatches, unless utilizing bonuses like Flame Body's.\nconst getPokemonHatchSteps = ({ hatch_counter }: IPokemonSpecies) => 255 * hatch_counter;\n\nexport default getPokemonHatchSteps;\n","import { IPokemon } from 'types/pokemonTypes';\n\nconst getPokemonAbilities = (\n  { abilities }: IPokemon,\n) => abilities.map(ability => ability.ability.name).join(', ');\n\nexport default getPokemonAbilities;\n","import { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\n\nconst getPokemonEggGroups = (\n  { egg_groups }: IPokemonSpecies,\n) => egg_groups.map(group => group.name).join(', ');\n\nexport default getPokemonEggGroups;\n","import React, { useCallback } from 'react';\nimport { IPokemon } from 'types/pokemonTypes';\nimport { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\nimport getPokemonGenderRatio from 'utils/getPokemonGenderRatio';\nimport getPokemonHeight from 'utils/getPokemonHeight';\nimport getPokemonCatchRate from 'utils/getPokemonCatchRate';\nimport getPokemonWeight from 'utils/getPokemonWeight';\nimport classNames from 'classnames';\nimport getPokemonHatchSteps from 'utils/getPokemonHatchSteps';\nimport getPokemonAbilities from 'utils/getPokemonAbilities';\nimport getPokemonEggGroups from 'utils/getPokemonEggGroups';\n\nimport './PokemonProfile.scss';\n\nconst PokemonProfile: React.FC<{\n  pokemon: IPokemon;\n  pokemonSpecies: IPokemonSpecies;\n}> = ({ pokemon, pokemonSpecies }) => {\n  const renderData = useCallback((property, value, capitalizeValue?: boolean) => {\n    const valueClassName = classNames('PokemonProfile-Value', {\n      'PokemonProfile-Value_capitalize': capitalizeValue,\n    });\n\n    return (\n      <div className=\"PokemonProfile-Data\">\n        <span className=\"PokemonProfile-Property\">{property}</span>\n        <span className={valueClassName}>{value}</span>\n      </div>\n    );\n  }, []);\n\n  return (\n    <div className=\"PokemonProfile\">\n      <div className=\"PokemonProfile-Column\">\n        {renderData('Height', getPokemonHeight(pokemon))}\n        {renderData('Catch Rate', getPokemonCatchRate(pokemonSpecies))}\n        {renderData('Egg Groups', getPokemonEggGroups(pokemonSpecies), true)}\n        {renderData('Abilities', getPokemonAbilities(pokemon), true)}\n      </div>\n      <div className=\"PokemonProfile-Column\">\n        {renderData('Weight', getPokemonWeight(pokemon))}\n        {renderData('Gender Ratio', getPokemonGenderRatio(pokemonSpecies))}\n        {renderData('Hatch Steps', getPokemonHatchSteps(pokemonSpecies))}\n        {renderData('EVs', 'N/A')}\n      </div>\n    </div>\n  );\n};\n\nexport default React.memo(PokemonProfile);\n","import { useState, useEffect } from 'react';\nimport Pokedex from 'utils/Pokedex';\nimport { IEvolutionChain } from 'types/evolutionChainTypes';\n\nconst useEvolutionChain = (evolutionChainUrl: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [evolutionChain, setEvolutionChain] = useState<IEvolutionChain>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    Pokedex.resource(evolutionChainUrl)\n      .then((response: IEvolutionChain) => {\n        setEvolutionChain(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [evolutionChainUrl]);\n\n  return ({ isLoading, evolutionChain });\n};\n\nexport default useEvolutionChain;\n","import React from 'react';\nimport { IPokemon } from 'types/pokemonTypes';\nimport usePokemon from 'hooks/usePokemon';\n\nconst PokemonContainer: React.FC<{\n  name: string,\n  children: (isLoading: boolean, pokemon?: IPokemon) => React.ReactNode;\n}> = ({\n  name,\n  children,\n}) => {\n  const { isLoading, pokemon } = usePokemon(name);\n\n  return (\n    <>\n      {children(isLoading, pokemon)}\n    </>\n  );\n};\n\nexport default React.memo(PokemonContainer);\n","import React, { useMemo, HTMLAttributes } from 'react';\nimport classNames from 'classnames';\nimport { IPokemon } from 'types/pokemonTypes';\nimport PokemonTypeBadge from 'components/PokemonTypeBadge';\nimport getPokemonBackground from 'utils/getPokemonBackground';\nimport getPokemonTypeNames from 'utils/getPokemonTypeNames';\n\nimport './PokemonCard.scss';\n\nconst PokemonCard: React.FC<{\n  pokemon: IPokemon,\n} & HTMLAttributes<HTMLElement>> = ({\n  pokemon,\n  className,\n}) => {\n  const pokemonTypeNames = useMemo(() => getPokemonTypeNames(pokemon), [pokemon]);\n  const pokemonColor = useMemo(() => getPokemonBackground(pokemon), [pokemon]);\n\n  const cardClassName = useMemo(() => classNames('PokemonCard', className), [className]);\n\n  const { name, id, sprites: { front_default: imgSrc } } = pokemon;\n\n  return (\n    <figure className={cardClassName} style={{ background: pokemonColor }}>\n      {imgSrc\n        ? <img src={imgSrc} alt={name} className=\"PokemonCard-Image\" />\n        : <div className=\"PokemonCard-Image PokemonCard-Image_none\">?</div>\n      }\n      <figcaption className=\"PokemonCard-Caption\">\n        <div className=\"PokemonCard-Id\">{id}</div>\n        <div className=\"PokemonCard-Name\">{name}</div>\n        <div className=\"PokemonCard-Types\">\n          {pokemonTypeNames.map(typeName => (\n            <PokemonTypeBadge\n              key={typeName}\n              typeName={typeName}\n              className=\"PokemonCard-Type\"\n            >\n              {typeName}\n            </PokemonTypeBadge>\n          ))\n          }\n        </div>\n      </figcaption>\n    </figure>\n  );\n};\n\nexport default React.memo(PokemonCard);\n","import React, { useCallback } from 'react';\nimport { IPokemonSpecies } from 'types/pokemonSpeciesTypes';\nimport useEvolutionChain from 'hooks/useEvolutionChain';\nimport { IChainLink } from 'types/evolutionChainTypes';\nimport PokemonContainer from 'containers/PokemonContainer';\nimport PokemonCard from 'components/PokemonCard';\nimport StyledLink from 'components/StyledLink';\n\nimport './PokemonEvolution.scss';\n\nconst PokemonEvolution: React.FC<{\n  pokemonSpecies: IPokemonSpecies;\n}> = ({ pokemonSpecies }) => {\n  const { isLoading, evolutionChain } = useEvolutionChain(\n    pokemonSpecies.evolution_chain.url,\n  );\n\n  const getFlatChain = useCallback((chain: IChainLink): string[] => {\n    if (chain.evolves_to.length) {\n      return [chain.species.name, ...getFlatChain(chain.evolves_to[0])];\n    }\n\n    return [chain.species.name];\n  }, []);\n\n  if (isLoading || !evolutionChain) return null;\n\n  return (\n    <div className=\"PokemonEvolution\">\n      {\n        getFlatChain(evolutionChain.chain).map((name, index, arr) => (\n          <PokemonContainer key={name} name={name}>\n            {\n              (isPokemonLoading, pokemon) => pokemon && (\n              <>\n                <StyledLink to={`/pokemon/${name}`} className=\"PokemonEvolution-PokemonLink\">\n                  <PokemonCard pokemon={pokemon} />\n                </StyledLink>\n                {index + 1 !== arr.length && <span className=\"PokemonEvolution-Arrow\">🡆</span>}\n              </>\n              )\n            }\n          </PokemonContainer>\n        ))\n      }\n    </div>\n  );\n};\n\nexport default React.memo(PokemonEvolution);\n","import { useState, useEffect } from 'react';\nimport { IMove } from 'types/moveTypes';\nimport Pokedex from 'utils/Pokedex';\n\n// pokeapi-js-wrapper, Any function with the designation \"ByName\" can also be passed an integer ID.\nconst useMove = (nameOrId: string) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [move, setMove] = useState<IMove>();\n\n  useEffect(() => {\n    setIsLoading(true);\n    Pokedex.getMoveByName(nameOrId)\n      .then((response: IMove) => {\n        setMove(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [nameOrId]);\n\n  return ({ isLoading, move });\n};\n\nexport default useMove;\n","import React from 'react';\nimport { IMove } from 'types/moveTypes';\nimport useMove from 'hooks/useMove';\n\nconst MoveContainer: React.FC<{\n  name: string,\n  children: (isLoading: boolean, move?: IMove) => React.ReactNode;\n}> = ({\n  name,\n  children,\n}) => {\n  const { isLoading, move } = useMove(name);\n\n  return (\n    <>\n      {children(isLoading, move)}\n    </>\n  );\n};\n\nexport default React.memo(MoveContainer);\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { IPokemon } from 'types/pokemonTypes';\nimport MoveContainer from 'containers/MoveContainer';\nimport PokemonTypeBadge from 'components/PokemonTypeBadge';\nimport { IMove } from 'types/moveTypes';\n\nimport './PokemonMoves.scss';\n\nconst PokemonMove: React.FC<{\n  move: IMove;\n}> = ({ move }) => {\n  const [showDetails, setShowDetails] = useState(false);\n\n  const preferredName = move.names.find(\n    item => item.language.name === 'en',\n  );\n\n  const moveEffect = move.effect_chance\n    ? move.effect_entries[0].effect.replace('$effect_chance%', move.effect_chance.toString())\n    : move.effect_entries[0].effect;\n\n  const moveIndicators: {name: string, value: string | number}[] = [\n    {\n      name: 'Power',\n      value: move.power || 'N/A',\n    },\n    {\n      name: 'Acc',\n      value: move.accuracy ? `${move.accuracy}%` : 'N/A',\n    },\n    {\n      name: 'PP',\n      value: move.pp || 'N/A',\n    },\n  ];\n\n  return (\n    <div\n      key={move.name}\n      className=\"PokemonMove\"\n    >\n      <div className=\"PokemonMove-Header\">\n        <div className=\"PokemonMove-Name\">\n          {preferredName\n            ? preferredName.name\n            : move.name\n          }\n        </div>\n        <PokemonTypeBadge\n          className=\"PokemonMove-Badge\"\n          typeName={move.type.name}\n          filling\n          volume\n        >\n          {move.type.name}\n        </PokemonTypeBadge>\n        <button\n          className=\"PokemonMove-ShowMore\"\n          onClick={() => {\n            setShowDetails(!showDetails);\n          }}\n        >\n          {showDetails ? '🡵' : '🡷'}\n        </button>\n      </div>\n      {showDetails && (\n        <div className=\"PokemonMove-Body\">\n          <div className=\"PokemonMove-Indicators\">\n            {\n              moveIndicators.map(indicator => (\n                <div key={indicator.name}>\n                  <span\n                    className=\"PokemonMove-IndicatorName\"\n                  >\n                    {indicator.name}\n                  </span>\n                  <span\n                    className=\"PokemonMove-IndicatorValue\"\n                  >\n                    {indicator.value}\n                  </span>\n                </div>\n              ))\n            }\n          </div>\n          <div className=\"PokemonMove-Effect\">\n            {moveEffect}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n};\n\nconst PokemonMoves: React.FC<{\n  pokemon: IPokemon;\n}> = ({\n  pokemon,\n}) => {\n  const movesClassName = classNames('PokemonMoves');\n\n  return (\n    <div className={movesClassName}>\n      {\n        pokemon.moves.map(moveItem => (\n          <MoveContainer key={moveItem.move.name} name={moveItem.move.name}>\n            {(isMoveLoading, move) => move && <PokemonMove move={move} />}\n          </MoveContainer>\n        ))\n      }\n    </div>\n  );\n};\n\nexport default React.memo(PokemonMoves);\n","import React, { useMemo, HTMLAttributes } from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport usePokemon from 'hooks/usePokemon';\nimport usePokemonSpecies from 'hooks/usePokemonSpecies';\nimport getPokemonBackground from 'utils/getPokemonBackground';\nimport StyledLink from 'components/StyledLink';\nimport PokemonSection from './components/PokemonSection';\nimport PokemonBasicInfo from './components/PokemonBasicInfo';\nimport PokemonProfile from './components/PokemonProfile';\nimport PokemonEvolution from './components/PokemonEvolution';\nimport PokemonMoves from './components/PokemonMoves';\n\nimport './Pokemon.scss';\n\nconst PokemonWrapper: React.FC<\n  HTMLAttributes<HTMLElement>\n> = ({ children, style }) => (\n  <main className=\"Pokemon\" style={style}>\n    <StyledLink className=\"Pokemon-Close\" to=\"/\">X</StyledLink>\n    {children}\n  </main>\n);\n\nconst Pokemon: React.FC<\n  RouteComponentProps<{\n    nameOrId: string\n  }>\n> = ({\n  match,\n}) => {\n  const nameOrId = useMemo(() => match.params.nameOrId, [match.params.nameOrId]);\n  const { isLoading: isPokemonLoading, pokemon } = usePokemon(nameOrId);\n  const { isLoading: isPokemonSpeciesLoading, pokemonSpecies } = usePokemonSpecies(nameOrId);\n\n  if (isPokemonLoading\n    || isPokemonSpeciesLoading\n    || !pokemon\n    || !pokemonSpecies\n  ) return <PokemonWrapper />;\n\n  const pokemonBackground = getPokemonBackground(pokemon);\n\n  return (\n    <PokemonWrapper style={{ background: pokemonBackground }}>\n      <div className=\"Pokemon-Body\">\n        <PokemonSection title={pokemon.name} isMain>\n          <PokemonBasicInfo pokemon={pokemon} />\n        </PokemonSection>\n\n        <PokemonSection className=\"Pokemon-RegularSection\" title=\"Profile\">\n          <PokemonProfile pokemon={pokemon} pokemonSpecies={pokemonSpecies} />\n        </PokemonSection>\n\n        <PokemonSection className=\"Pokemon-RegularSection\" title=\"Evolutions\">\n          <PokemonEvolution pokemonSpecies={pokemonSpecies} />\n        </PokemonSection>\n\n        <PokemonSection className=\"Pokemon-RegularSection\" title=\"Moves\">\n          <PokemonMoves pokemon={pokemon} />\n        </PokemonSection>\n      </div>\n    </PokemonWrapper>\n  );\n};\n\nexport default React.memo(Pokemon);\n","export const getNextPageNumber = (pageNumber: number | null, numberOfPages: number) => {\n  if (!pageNumber || pageNumber + 1 > numberOfPages) {\n    return null;\n  }\n  return pageNumber + 1;\n};\n\nexport const getPrevPageNumber = (pageNumber: number | null) => {\n  if (!pageNumber || pageNumber - 1 <= 0) {\n    return null;\n  }\n  return pageNumber - 1;\n};\n\nexport const getCurrentPageNumber = (offset: number, limit: number) => {\n  if (offset === 0) {\n    return 1;\n  }\n  return (offset / limit) + 1;\n};\n\nexport const getNumberOfPages = (count: number, limit:number) => Math.ceil(count / limit);\n","import React, { useMemo, HTMLAttributes, useCallback } from 'react';\nimport classNames from 'classnames';\nimport {\n  getCurrentPageNumber,\n  getNumberOfPages,\n  getNextPageNumber,\n  getPrevPageNumber,\n} from './utils';\n\nimport './Pagination.scss';\n\nconst Pagination: React.FC<{\n  count: number;\n  limit: number;\n  offset: number;\n  setOffset: (offset: number) => void;\n} & HTMLAttributes<HTMLElement>> = ({\n  count,\n  limit,\n  offset,\n  setOffset,\n  className,\n}) => {\n  const numberOfPages = useMemo(() => getNumberOfPages(count, limit), [count, limit]);\n  const currentPageNumber = useMemo(() => getCurrentPageNumber(offset, limit), [offset, limit]);\n  const nextPageNumber = useMemo(\n    () => getNextPageNumber(currentPageNumber, numberOfPages), [currentPageNumber, numberOfPages],\n  );\n  const afterNextPageNumber = useMemo(\n    () => getNextPageNumber(nextPageNumber, numberOfPages), [nextPageNumber, numberOfPages],\n  );\n  const prevPageNumber = useMemo(() => getPrevPageNumber(currentPageNumber), [currentPageNumber]);\n  const beforePrevPageNumber = useMemo(() => getPrevPageNumber(prevPageNumber), [prevPageNumber]);\n\n  const visiblePages = useMemo(() => {\n    const result: number[] = [];\n\n    if (prevPageNumber) {\n      result.push(prevPageNumber);\n\n      if (currentPageNumber === numberOfPages) {\n        if (beforePrevPageNumber) {\n          result.push(beforePrevPageNumber);\n        }\n      }\n    }\n\n    result.push(currentPageNumber);\n\n    if (nextPageNumber) {\n      result.push(nextPageNumber);\n\n      if (!prevPageNumber) {\n        if (afterNextPageNumber) {\n          result.push(afterNextPageNumber);\n        }\n      }\n    }\n\n    return result;\n  }, [\n    afterNextPageNumber,\n    beforePrevPageNumber,\n    currentPageNumber,\n    nextPageNumber,\n    numberOfPages,\n    prevPageNumber,\n  ]);\n\n  const handlePageClick = useCallback((pageNumber: number) => {\n    setOffset(limit * (pageNumber - 1));\n  }, [limit, setOffset]);\n\n  const paginationClassName = useMemo(() => classNames('Pagination', className), [className]);\n\n  return (\n    <nav className={paginationClassName}>\n      <ul className=\"Pagination-List\">\n        <li\n          className={\n            classNames(\n              'Pagination-Page',\n              {\n                'Pagination-Page_possible': prevPageNumber !== null,\n                'Pagination-Page_disabled': prevPageNumber === null,\n              },\n            )\n          }\n          onClick={() => { handlePageClick(1); }}\n        >\n          &lt;&lt;\n        </li>\n        {\n          visiblePages.map(\n            pageNumber => (\n              <li\n                key={pageNumber}\n                className={\n                  classNames(\n                    'Pagination-Page',\n                    {\n                      'Pagination-Page_active': pageNumber === currentPageNumber,\n                      'Pagination-Page_possible': pageNumber !== currentPageNumber,\n                    },\n                  )\n                }\n                onClick={() => { handlePageClick(pageNumber); }}\n              >\n                {pageNumber}\n              </li>\n            ),\n          )\n        }\n        <li\n          className={\n            classNames(\n              'Pagination-Page',\n              {\n                'Pagination-Page_possible': nextPageNumber !== null,\n                'Pagination-Page_disabled': nextPageNumber === null,\n              },\n            )\n          }\n          onClick={() => { handlePageClick(numberOfPages); }}\n        >\n          &gt;&gt;\n        </li>\n      </ul>\n    </nav>\n  );\n};\n\nexport default React.memo(Pagination);\n","import React from 'react';\n\nimport './Filter.scss';\nimport classNames from 'classnames';\n\nconst Filter: React.FC<{\n  name: string;\n  values: string[];\n  activeValue: string;\n  onSetValue: (value: string) => void;\n}> = ({\n  name,\n  values,\n  activeValue,\n  onSetValue,\n}) => (\n  <nav className=\"Filter\">\n    <strong className=\"Filter-Name\">{`Filter by ${name}: `}</strong>\n    <ul className=\"Filter-List\">\n      {\n        values.map(value => (\n          <li\n            key={value}\n            className={classNames('Filter-Item', {\n              'Filter-Item_active': value === activeValue,\n            })}\n            // https://cdb.reacttraining.com/react-inline-functions-and-performance-bdff784f5578\n            onClick={() => { onSetValue(value); }}\n          >\n            {value}\n          </li>\n        ))\n      }\n    </ul>\n  </nav>\n);\n\nexport default Filter;\n","import { useState, useEffect, useCallback } from 'react';\nimport Pokedex from 'utils/Pokedex';\nimport { INamedAPIResourceList } from 'types/commonTypes';\nimport { IType } from 'types/typeTypes';\n\n// pokeapi-js-wrapper, Any function with the designation \"ByName\" can also be passed an integer ID.\nconst usePokemonList = (\n  limit: number,\n  offset: number,\n  typeName?: string,\n) => {\n  const [isLoading, setIsLoading] = useState<boolean>(false);\n  const [pokemonsList, setPokemonsList] = useState<INamedAPIResourceList>();\n\n  const getPokemonsList = useCallback(() => {\n    setIsLoading(true);\n\n    Pokedex.getPokemonsList({\n      limit,\n      offset,\n    })\n      .then((response: INamedAPIResourceList) => {\n        setPokemonsList(response);\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [limit, offset]);\n\n  const getTypeByName = useCallback(() => {\n    setIsLoading(true);\n\n    Pokedex.getTypeByName(typeName)\n      .then((response: IType) => {\n        const count = response.pokemon.length;\n        const results = response.pokemon\n          .slice(offset, offset + limit)\n          .map(({ pokemon }) => pokemon);\n\n        setPokemonsList({\n          count,\n          results,\n          next: null,\n          previous: null,\n        });\n      })\n      .catch(console.error)\n      .finally(() => {\n        setIsLoading(false);\n      });\n  }, [limit, offset, typeName]);\n\n  useEffect(() => {\n    if (typeName) {\n      getTypeByName();\n    } else {\n      getPokemonsList();\n    }\n  }, [getPokemonsList, getTypeByName, limit, offset, typeName]);\n\n  return ({ isLoading, pokemonsList });\n};\n\nexport default usePokemonList;\n","import { PokemonTypeName } from 'types/pokemonTypes';\n\nexport const DEFAULT_FILTER_ALL = 'all';\n\nexport const FILTERS = [\n  DEFAULT_FILTER_ALL,\n  ...Object.values(PokemonTypeName),\n];\n","import React, { useState, useCallback } from 'react';\nimport { LIST_ITEMS_LIMIT } from 'constants/limits';\nimport PokemonContainer from 'containers/PokemonContainer';\nimport PokemonCard from 'components/PokemonCard';\nimport StyledLink from 'components/StyledLink';\nimport Pagination from 'components/Pagination';\nimport Filter from 'components/Filter';\nimport usePokemonList from 'hooks/usePokemonList';\nimport { DEFAULT_FILTER_ALL, FILTERS } from './constants';\n\nimport './AllPokemons.scss';\n\nconst AllPokemons: React.FC = () => {\n  const [offset, setOffset] = useState<number>(\n    parseInt(\n      sessionStorage.getItem('offset') || '0',\n      10,\n    ),\n  );\n\n  const [activeFilter, setActiveFilter] = useState<string>(\n    sessionStorage.getItem('filter') || DEFAULT_FILTER_ALL,\n  );\n\n  const { pokemonsList, isLoading } = usePokemonList(\n    LIST_ITEMS_LIMIT,\n    offset,\n    activeFilter !== DEFAULT_FILTER_ALL\n      ? activeFilter\n      : undefined,\n  );\n\n  const handleSetOffset = useCallback((newOffset: number) => {\n    sessionStorage.setItem('offset', `${newOffset}`);\n    setOffset(newOffset);\n  }, []);\n\n  const handleSetFilter = useCallback((newFilter: string) => {\n    sessionStorage.setItem('filter', `${newFilter}`);\n    setActiveFilter(newFilter);\n    setOffset(0);\n  }, []);\n\n  const renderPokemon = useCallback((name: string) => (\n    <PokemonContainer key={name} name={name}>\n      {(isPokemonLoading, pokemon) => !isPokemonLoading && pokemon && (\n        <StyledLink to={`/pokemon/${name}`} className=\"AllPokemons-PokemonLink\">\n          <PokemonCard pokemon={pokemon} />\n        </StyledLink>\n      )}\n    </PokemonContainer>\n  ), []);\n\n  return (\n    <div className=\"AllPokemons\">\n      <Filter\n        name=\"Type\"\n        values={FILTERS}\n        activeValue={activeFilter}\n        onSetValue={handleSetFilter}\n      />\n      {!isLoading && pokemonsList && (\n        <section className=\"AllPokemons-List\">\n          {pokemonsList.results.map(({ name }) => renderPokemon(name))}\n        </section>\n\n      )}\n      {pokemonsList\n        && (\n          <Pagination\n            className=\"AllPokemons-Nav\"\n            count={pokemonsList.count}\n            limit={LIST_ITEMS_LIMIT}\n            offset={offset}\n            setOffset={handleSetOffset}\n          />\n        )\n      }\n    </div>\n  );\n};\n\nexport default React.memo(AllPokemons);\n","/* eslint-disable import/prefer-default-export */\nexport const LIST_ITEMS_LIMIT = 20;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport { BASE_URL } from 'constants/url';\nimport Pokemon from 'pages/Pokemon';\nimport AllPokemons from 'pages/AllPokemons';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'normalize.css';\nimport 'styles/base.scss';\n\nReactDOM.render(\n  <Router basename={BASE_URL}>\n    <Switch>\n      <Route exact path=\"/\" component={AllPokemons} />\n      <Route path=\"/pokemon/:nameOrId\" component={Pokemon} />\n    </Switch>\n  </Router>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","/* eslint-disable import/prefer-default-export */\nexport const BASE_URL = process.env.PUBLIC_URL;\n"],"sourceRoot":""}